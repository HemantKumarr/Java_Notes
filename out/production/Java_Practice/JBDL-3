Collections
Collections is a class and Collection is an interface.

List - ordered collection - insertion order is preserved, duplicate values allowed, positional access allowed


Generics(intro in JDK 1.5) - template based programming -> irrespective of data types we can have collections. Generics gives us flexibility to choose any data type.
Introduction of object class makes generics possible.



ArrayList class implements List interface. Its default size is 10.
Comparable is used when we have access to the class otherwise Comparator is used like when we are sorting an object of a class which is present in
3rd party library.
When we implement Comparable Interface we need to override compareTo method. When we invoke Collections.sort(studentList) sorting will be based on compareTo
custom defined in the Student class.
When we print any object, toString() method of Object class is called which can be overridden in the User class and object will be printed accordingly.

equals and hashcode() method

//   Integer i = 1;  // Removes the element 1 from the array since i value is an object.
//   int i=1;    // Removes the element at index 1 from the array.
//   al.remove(i);

Everything is an object in java however we also have primitive data types like int, float etc which are not objects.
We can have collection only of objects not of primitive data types like int, float etc since collection follows generics.

Collections.sort uses Tim sort which is combination of Merge and Insertion sort.

Serialization is a mechanism of converting the state of an object into a byte stream. Deserialization is the reverse process where the byte stream is used to recreate the actual Java object in memory. This mechanism is used to persist the object.
Serializable is a marker interface (has no data member and method). It is used to “mark” java classes so that objects of these classes may get certain capability. Other examples of marker interfaces are:- Cloneable and Remote

Points to remember

1. If a parent class has implemented Serializable interface then child class doesn’t need to implement it but vice-versa is not true.
2. Only non-static data members are saved via Serialization process.
3. Static data members and transient data members are not saved via Serialization process. So, if you don’t want to save value of a non-static data member then make it transient. When JVM comes across transient keyword, it ignores original value of the variable and save default value of that variable data type
4. Constructor of object is never called when an object is deserialized.
5. Associated objects must be implementing Serializable interface


Singleton Design pattern
Singleton pattern restricts the instantiation of a class and ensures that only one instance of the class exists in the Java Virtual Machine.
The singleton class must provide a global access point to get the instance of the class.

To implement a singleton pattern, we have different approaches, but all of them have the following common concepts.
    Private constructor to restrict instantiation of the class from other classes.
    Private static variable of the same class that is the only instance of the class.
    Public static method that returns the instance of the class, this is the global access point for the outer world to get the instance of the singleton class.

. Eager initialization
In eager initialization, the instance of the singleton class is created at the time of class loading. The drawback to eager initialization is that the method is created even though the client application might not be using it.
Eager initialization is suitable when the singleton instance is lightweight, and its creation is not resource intensive.

. Lazy initialization
A lazy singleton is a design pattern used in software development to ensure that only one instance of a particular class is created and that it is created only when it is needed for the first time. The "lazy" part means that the instance is not created immediately when the program starts or the class is loaded, but rather when it is requested for the first time.Lazy initialization is useful when the singleton instance creation is expensive or when it requires resources that should be allocated only when needed.


Qs
arraylist throws exception but no throws keyword?
serializable has no methods then how serialization happens?



