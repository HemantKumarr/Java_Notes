StreamAPI
Predicates - used for dynamically passed function body

:: - double colon operator or MRO - method reference operator -  is used to call a method by referring to it with the help of its class directly.
Method reference or double colon operator can be used to refer: A static method, an instance method, or a constructor.


Map is a intermediate operation but foreach is a terminal operation
Map accumulates all of the results into a collection, whereas foreach returns nothing.

Functional interface - contains only one abstract method. e.g. Runnable, ActionListener, and Comparable.
    Consumer
    Predicate
    Function
    Supplier


Multithreading
Program - a set of instructions
Process - a program under execution
Thread - a smallest unit in a Process

Multithreading examples - Banking - monthly statement generation runs a separate thread does not obstruct the flow of other users.
MS Word - a thread does spell check, another which checks grammar check

Not possible to predict behaviour of threads. Thread will work on different times on different OS. Behaviour of threads determined by availability of resources
on that machine.

Thread implements Runnable interface.
The Runnable interface should be implemented by any class whose instances are intended to be executed by a thread. The class
must define a method of no arguments called run().
When we call start() method of thread the result is that two threads are running concurrently: the current thread (which returns from the call to the start method) and the other thread (which executes its run method).
We can also call run() method directly, in which case only one thread(the main thread) will be running.

Thread can have priority of 1 to 10 with minimum priority =1 default =5 and max = 10.

In theory, over a given period of time, higher-priority threads get more CPU time than lower-priority threads. In practice, the amount of CPU time that a thread gets
often depends on several factors besides its priority. (For example, how an operating system implements multitasking can affect the relative availability of CPU time.) A higher-priority
thread can also preempt a lower-priority one. For instance, when a lower-priority thread is running and a higher-priority thread resumes (from sleeping or waiting on I/O, for
example), it will preempt the lower-priority thread.


Daemon threads - are low-priority threads that run in the background to perform tasks such as garbage collection or provide services to user
threads. The life of a daemon thread depends on the mercy of user threads, meaning that when all user threads finish their execution, the Java Virtual
Machine (JVM) automatically terminates the daemon thread.
To put it simply, daemon threads serve user threads by handling background tasks and have no role other than supporting the main execution.
We cannot call the setDaemon() method after starting the thread.


